`timescale 1ns/1ps
////////////////////////////transaction//////////////////////////
class transaction;
  randc bit [7:0]a;
  randc bit [7:0]b;
  bit [7:0]y;
  
endclass

/////////////////////////////////generator//////////////////////////////
class generator;
  transaction t;
  mailbox mbx;
  event done;
  integer i;
  
  function new(mailbox mbx);
    this.mbx=mbx;
  endfunction
  
 ///implementing task
  task run();
    t=new();
    for(i=0;i<20;i++)
    begin
      t.randomize();
      mbx.put(t);
      $display("[GEN]:Data send to driver");
      @(done);
      #10;
    end
  endtask
endclass

//////ineterface////////////////////
interface andt_intf();
   logic [7:0]a;
  logic [7:0]b;
  logic [7:0]y;
endinterface 


//////driver class///////////////////////////

class driver;
  transaction t;
  mailbox mbx;
  event done;;
  virtual andt_intf vif;
  function new(mailbox mbx);
    this.mbx=mbx;
  endfunction
  /////getting the value from
  task run(); 
  t=new();
  forever 
    begin
      mbx.get(t);
      vif.a=t.a;
      vif.b=t.b;
      $display("[DRV]:Trigger interface");
      ->done;
      #10;
     end
  endtask
endclass

////////monitor class///////////////////////////////

class monitor;
  virtual andt_intf vif;
  mailbox mbx;
  transaction t;
  function new(mailbox mbx);
    this.mbx=mbx;
  endfunction
  
  task run();
    t=new();
    forever 
      begin
      t.a=vif.a;
        t.b=vif.b;
        t.y=vif.y;
        mbx.put(t);
        $display("[MON]:data sent to scoreboard");
        #10;
      end 
  endtask
endclass

///////////////////////////scoreboard/////////////////////////////////////

class scoreboard;
  mailbox mbx;
  transaction t;
  bit [7:0]temp;
  
  function new(mailbox mbx);
    this.mbx=mbx;
  endfunction
  
  task run();
    t=new();
    forever 
      begin 
        mbx.get(t);
      temp=t.a & t.b;////////logic for scoreboarrd to check 
        if(temp==t.y)
          $display("[SCO]:Test passed");
        else 
          $display("[SCO]:Test not passed");
    #10;
      end
    
  endtask
endclass

////////////////////environment////////////////////////////////

class environment;
  generator gen;
  driver drv;
  monitor mon;
  scoreboard sco;
  mailbox gdmbx;
  mailbox msmbx;
  virtual andt_intf vif;
  event gddone;
  function new(mailbox gdmbx,mailbox msmbx);
   this.gdmbx=gdmbx;
    this.msmbx=msmbx;
  gen =new(gdmbx);
  drv =new(gdmbx);
  mon =new(msmbx);
  sco =new(msmbx);
  endfunction
 
  task run();
    gen.done=gddone;
    drv.done=gddone;
    drv.vif=vif;
    mon.vif=vif;
    
    fork
      gen.run();
      drv.run();
      mon.run();
      sco.run();
    join_any
  endtask
endclass
//////////////////////////////////////////////////testbench////////////////////////////////////////////
module tb();
  environment env;
 
  mailbox gdmbx;
  mailbox msmbx;
  
 andt_intf vif();
  
  bit8_and dut(vif.a,vif.b,vif.y);
  
  initial 
  begin
    gdmbx=new();
    msmbx=new();
    env=new(gdmbx,msmbx);
    env.vif=vif;
    env.run();
    #500;
    $finish;
  end
endmodule



